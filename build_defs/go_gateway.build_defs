subinclude(
    "///proto//build_defs/sdk",
    "///go//build_defs:go"
)

def _import_path(root_dir):
    pkg = package_name()
    if root_dir:
        pkg = pkg.removeprefix(root_dir + "/")

    if CONFIG.GO.IMPORT_PATH:
        return join_path(CONFIG.GO.IMPORT_PATH, pkg)
    return pkg

def _go_path_mapping():
    """Used to update the Go path mapping; by default it doesn't really import in the way we want."""
    def _map_go_paths(rule_name):
        mapping = ',M'.join(get_labels(rule_name, 'proto:go-map:'))
        cmd = get_command(rule_name)
        cmd = cmd.replace('--go_out=', f'--go_out=M{mapping}:')
        cmd = cmd.replace('--go-grpc_out=', f'--go-grpc_out=M{mapping}:')
        cmd = cmd.replace('--grpc-gateway_out=', f'--grpc-gateway_out=M{mapping}:')
        set_command(rule_name, cmd)
    return _map_go_paths

def _go_mapping_labels(srcs:list, root_dir:str):
    import_path = get_base_path()
    pkg_dir = import_path

    if root_dir:
        import_path = import_path.removeprefix(root_dir + "/")
        pkg_dir = pkg_dir.removeprefix(root_dir + "/")
    if CONFIG.GO.IMPORT_PATH:
        import_path = join_path(CONFIG.GO.IMPORT_PATH, import_path)

    return [f'proto:go-map: {pkg_dir}/{src}={import_path}' for src in srcs
               if not src.startswith(':') and not src.startswith('/')]

def go_gateway_library(name:str, srcs:list, deps:list=[], visibility:list=None, labels:list&features&tags=[],
                      test_only:bool&testonly=False, root_dir:str='', protoc_flags:list=[], additional_context:dict=None):
    # Read from the foo-proto plugin config. If you're not using the Plugin api, [BuildConfig] can be used instead.
    deps += [CONFIG.GO_GATEWAY.PROTO_DEP, CONFIG.GO_GATEWAY.GRPC_DEP, CONFIG.GO_GATEWAY.GATEWAY_DEP]

    protoc = protoc_rule(
        name = name,
        srcs = srcs,
        language = "go_gateway",
        tools= {
            "grpc_gateway": [CONFIG.GO_GATEWAY.GATEWAY_PLUGIN],
            'go': [CONFIG.GO_GATEWAY.PLUGIN],
            "grpc_go": [CONFIG.GO_GATEWAY.GRPC_PLUGIN]
        },
        protoc_flags = protoc_flags,
        plugin_flags = [
            '--plugin=protoc-gen-go="`which $TOOLS_GO`"',
            '--go_out="$OUT_DIR"',
            '--go_opt=paths=source_relative',
            '--plugin=protoc-gen-go-grpc="$(which $TOOLS_GRPC_GO)"',
            '--go-grpc_out="$OUT_DIR"',
            '--go-grpc_opt=paths=source_relative',
            '--grpc-gateway_out="$OUT_DIR"',
            '--plugin=protoc-gen-grpc-gateway="$(which $TOOLS_GRPC_GATEWAY)"',
            '--grpc-gateway_opt=paths=source_relative'
        ],
        labels = labels + _go_mapping_labels(srcs, root_dir),
        test_only = test_only,
        root_dir = root_dir,
        deps = deps,
        visibility = visibility,
        pre_build = _go_path_mapping(),
    )

    return go_library(
        name = f"_{name}#go",
        srcs = [protoc],
        deps = deps,
        test_only = test_only,
        labels = labels,
        visibility = visibility,
        import_path = _import_path(root_dir),
    )


def go_gateway_language():
    """A rule for a grpc language for go
    see https://github.com/please-build/proto-rules/blob/master/build_defs/sdk/sdk.build_defs for more info
    """
    return proto_language(
        language = "go_gateway",
        build_def = go_gateway_library,
        additional_provides={"go_src": "go_srcs"},
    )